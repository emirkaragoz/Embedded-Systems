
STM_HW1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003504  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b4  080036b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036bc  080036bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080036d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080036d0  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b72  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001649  00000000  00000000  00029bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015335  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075f8  00000000  00000000  00041a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000882be  00000000  00000000  0004908d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d134b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e88  00000000  00000000  000d13c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003684 	.word	0x08003684

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003684 	.word	0x08003684

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f92b 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f002 fed6 	bl	80032bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f943 	bl	80007c6 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f90b 	bl	8000772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	2000003c 	.word	0x2000003c

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000003c 	.word	0x2000003c

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <__NVIC_EnableIRQ+0x38>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db0a      	blt.n	8000686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	490c      	ldr	r1, [pc, #48]	; (80006a8 <__NVIC_SetPriority+0x4c>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	440b      	add	r3, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000684:	e00a      	b.n	800069c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <__NVIC_SetPriority+0x50>)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	f003 030f 	and.w	r3, r3, #15
 8000692:	3b04      	subs	r3, #4
 8000694:	0112      	lsls	r2, r2, #4
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	440b      	add	r3, r1
 800069a:	761a      	strb	r2, [r3, #24]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 32ff 	mov.w	r2, #4294967295
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	43da      	mvns	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	401a      	ands	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f8:	f04f 31ff 	mov.w	r1, #4294967295
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	43d9      	mvns	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f7ff ff8e 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff29 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff3e 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff8e 	bl	80006b0 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5d 	bl	800065c <__NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff31 	bl	8000620 <__NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e159      	b.n	8000ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007fc:	2201      	movs	r2, #1
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	429a      	cmp	r2, r3
 8000816:	f040 8148 	bne.w	8000aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d00b      	beq.n	800083a <HAL_GPIO_Init+0x5a>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d007      	beq.n	800083a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800082e:	2b11      	cmp	r3, #17
 8000830:	d003      	beq.n	800083a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b12      	cmp	r3, #18
 8000838:	d130      	bne.n	800089c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4013      	ands	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	4313      	orrs	r3, r2
 8000862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000870:	2201      	movs	r2, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	091b      	lsrs	r3, r3, #4
 8000886:	f003 0201 	and.w	r2, r3, #1
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4313      	orrs	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d003      	beq.n	80008dc <HAL_GPIO_Init+0xfc>
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b12      	cmp	r3, #18
 80008da:	d123      	bne.n	8000924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	220f      	movs	r2, #15
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	691a      	ldr	r2, [r3, #16]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	69b9      	ldr	r1, [r7, #24]
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0203 	and.w	r2, r3, #3
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 80a2 	beq.w	8000aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b56      	ldr	r3, [pc, #344]	; (8000ac4 <HAL_GPIO_Init+0x2e4>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a55      	ldr	r2, [pc, #340]	; (8000ac4 <HAL_GPIO_Init+0x2e4>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b53      	ldr	r3, [pc, #332]	; (8000ac4 <HAL_GPIO_Init+0x2e4>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000982:	4a51      	ldr	r2, [pc, #324]	; (8000ac8 <HAL_GPIO_Init+0x2e8>)
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3302      	adds	r3, #2
 800098a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a48      	ldr	r2, [pc, #288]	; (8000acc <HAL_GPIO_Init+0x2ec>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d019      	beq.n	80009e2 <HAL_GPIO_Init+0x202>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a47      	ldr	r2, [pc, #284]	; (8000ad0 <HAL_GPIO_Init+0x2f0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0x1fe>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <HAL_GPIO_Init+0x2f4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00d      	beq.n	80009da <HAL_GPIO_Init+0x1fa>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <HAL_GPIO_Init+0x2f8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d007      	beq.n	80009d6 <HAL_GPIO_Init+0x1f6>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_GPIO_Init+0x2fc>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_GPIO_Init+0x1f2>
 80009ce:	2304      	movs	r3, #4
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009d2:	2307      	movs	r3, #7
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <HAL_GPIO_Init+0x2e8>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a26:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a50:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f aea2 	bls.w	80007fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40013c00 	.word	0x40013c00

08000ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000af4:	787b      	ldrb	r3, [r7, #1]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b00:	e003      	b.n	8000b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	041a      	lsls	r2, r3, #16
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	619a      	str	r2, [r3, #24]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	401a      	ands	r2, r3
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d104      	bne.n	8000b3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	041a      	lsls	r2, r3, #16
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b38:	e002      	b.n	8000b40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	619a      	str	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e25b      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d075      	beq.n	8000c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b6a:	4ba3      	ldr	r3, [pc, #652]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d00c      	beq.n	8000b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b76:	4ba0      	ldr	r3, [pc, #640]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d112      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b82:	4b9d      	ldr	r3, [pc, #628]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b8e:	d10b      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b90:	4b99      	ldr	r3, [pc, #612]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d05b      	beq.n	8000c54 <HAL_RCC_OscConfig+0x108>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d157      	bne.n	8000c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e236      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb0:	d106      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x74>
 8000bb2:	4b91      	ldr	r3, [pc, #580]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a90      	ldr	r2, [pc, #576]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e01d      	b.n	8000bfc <HAL_RCC_OscConfig+0xb0>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc8:	d10c      	bne.n	8000be4 <HAL_RCC_OscConfig+0x98>
 8000bca:	4b8b      	ldr	r3, [pc, #556]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a8a      	ldr	r2, [pc, #552]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b88      	ldr	r3, [pc, #544]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a87      	ldr	r2, [pc, #540]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e00b      	b.n	8000bfc <HAL_RCC_OscConfig+0xb0>
 8000be4:	4b84      	ldr	r3, [pc, #528]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a83      	ldr	r2, [pc, #524]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b81      	ldr	r3, [pc, #516]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a80      	ldr	r2, [pc, #512]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d013      	beq.n	8000c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fcce 	bl	80005a4 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fcca 	bl	80005a4 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1fb      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1e:	4b76      	ldr	r3, [pc, #472]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0xc0>
 8000c2a:	e014      	b.n	8000c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fcba 	bl	80005a4 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff fcb6 	bl	80005a4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e1e7      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c46:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f0      	bne.n	8000c34 <HAL_RCC_OscConfig+0xe8>
 8000c52:	e000      	b.n	8000c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d063      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c62:	4b65      	ldr	r3, [pc, #404]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 030c 	and.w	r3, r3, #12
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00b      	beq.n	8000c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c6e:	4b62      	ldr	r3, [pc, #392]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d11c      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c7a:	4b5f      	ldr	r3, [pc, #380]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d116      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c86:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <HAL_RCC_OscConfig+0x152>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e1bb      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9e:	4b56      	ldr	r3, [pc, #344]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	4952      	ldr	r1, [pc, #328]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	e03a      	b.n	8000d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d020      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cbc:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <HAL_RCC_OscConfig+0x2b0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc2:	f7ff fc6f 	bl	80005a4 <HAL_GetTick>
 8000cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc8:	e008      	b.n	8000cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cca:	f7ff fc6b 	bl	80005a4 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d901      	bls.n	8000cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e19c      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cdc:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f0      	beq.n	8000cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce8:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	4940      	ldr	r1, [pc, #256]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
 8000cfc:	e015      	b.n	8000d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <HAL_RCC_OscConfig+0x2b0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc4e 	bl	80005a4 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fc4a 	bl	80005a4 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e17b      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f0      	bne.n	8000d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d030      	beq.n	8000d98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d016      	beq.n	8000d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <HAL_RCC_OscConfig+0x2b4>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d44:	f7ff fc2e 	bl	80005a4 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fc2a 	bl	80005a4 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e15b      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f0      	beq.n	8000d4c <HAL_RCC_OscConfig+0x200>
 8000d6a:	e015      	b.n	8000d98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_RCC_OscConfig+0x2b4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d72:	f7ff fc17 	bl	80005a4 <HAL_GetTick>
 8000d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fc13 	bl	80005a4 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e144      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f0      	bne.n	8000d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 80a0 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10f      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_RCC_OscConfig+0x2b8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d121      	bne.n	8000e26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_RCC_OscConfig+0x2b8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_RCC_OscConfig+0x2b8>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dee:	f7ff fbd9 	bl	80005a4 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	e011      	b.n	8000e1a <HAL_RCC_OscConfig+0x2ce>
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	42470000 	.word	0x42470000
 8000e00:	42470e80 	.word	0x42470e80
 8000e04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e08:	f7ff fbcc 	bl	80005a4 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e0fd      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1a:	4b81      	ldr	r3, [pc, #516]	; (8001020 <HAL_RCC_OscConfig+0x4d4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d106      	bne.n	8000e3c <HAL_RCC_OscConfig+0x2f0>
 8000e2e:	4b7d      	ldr	r3, [pc, #500]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e32:	4a7c      	ldr	r2, [pc, #496]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6713      	str	r3, [r2, #112]	; 0x70
 8000e3a:	e01c      	b.n	8000e76 <HAL_RCC_OscConfig+0x32a>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d10c      	bne.n	8000e5e <HAL_RCC_OscConfig+0x312>
 8000e44:	4b77      	ldr	r3, [pc, #476]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e48:	4a76      	ldr	r2, [pc, #472]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e50:	4b74      	ldr	r3, [pc, #464]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e54:	4a73      	ldr	r2, [pc, #460]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5c:	e00b      	b.n	8000e76 <HAL_RCC_OscConfig+0x32a>
 8000e5e:	4b71      	ldr	r3, [pc, #452]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e62:	4a70      	ldr	r2, [pc, #448]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6713      	str	r3, [r2, #112]	; 0x70
 8000e6a:	4b6e      	ldr	r3, [pc, #440]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6e:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e70:	f023 0304 	bic.w	r3, r3, #4
 8000e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d015      	beq.n	8000eaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fb91 	bl	80005a4 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e84:	e00a      	b.n	8000e9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e86:	f7ff fb8d 	bl	80005a4 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e0bc      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e9c:	4b61      	ldr	r3, [pc, #388]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0ee      	beq.n	8000e86 <HAL_RCC_OscConfig+0x33a>
 8000ea8:	e014      	b.n	8000ed4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fb7b 	bl	80005a4 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb0:	e00a      	b.n	8000ec8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fb77 	bl	80005a4 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e0a6      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec8:	4b56      	ldr	r3, [pc, #344]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1ee      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d105      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eda:	4b52      	ldr	r3, [pc, #328]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a51      	ldr	r2, [pc, #324]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8092 	beq.w	8001014 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ef0:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d05c      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d141      	bne.n	8000f88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f04:	4b48      	ldr	r3, [pc, #288]	; (8001028 <HAL_RCC_OscConfig+0x4dc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fb4b 	bl	80005a4 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f12:	f7ff fb47 	bl	80005a4 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e078      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f24:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f0      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69da      	ldr	r2, [r3, #28]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	019b      	lsls	r3, r3, #6
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	085b      	lsrs	r3, r3, #1
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	061b      	lsls	r3, r3, #24
 8000f54:	4933      	ldr	r1, [pc, #204]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_RCC_OscConfig+0x4dc>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fb20 	bl	80005a4 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f68:	f7ff fb1c 	bl	80005a4 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e04d      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x41c>
 8000f86:	e045      	b.n	8001014 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x4dc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb09 	bl	80005a4 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb05 	bl	80005a4 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e036      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x44a>
 8000fb4:	e02e      	b.n	8001014 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e029      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_RCC_OscConfig+0x4d8>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d11c      	bne.n	8001010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d115      	bne.n	8001010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fea:	4013      	ands	r3, r2
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d10d      	bne.n	8001010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d106      	bne.n	8001010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800100c:	429a      	cmp	r2, r3
 800100e:	d001      	beq.n	8001014 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40007000 	.word	0x40007000
 8001024:	40023800 	.word	0x40023800
 8001028:	42470060 	.word	0x42470060

0800102c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0cc      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001040:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d90c      	bls.n	8001068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104e:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001056:	4b63      	ldr	r3, [pc, #396]	; (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d001      	beq.n	8001068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0b8      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d020      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001080:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a58      	ldr	r2, [pc, #352]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800108a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001098:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a4:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	494d      	ldr	r1, [pc, #308]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d044      	beq.n	800114c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d107      	bne.n	80010da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	4b47      	ldr	r3, [pc, #284]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d119      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e07f      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d003      	beq.n	80010ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d107      	bne.n	80010fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ea:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e06f      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e067      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f023 0203 	bic.w	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4934      	ldr	r1, [pc, #208]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	4313      	orrs	r3, r2
 800111a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800111c:	f7ff fa42 	bl	80005a4 <HAL_GetTick>
 8001120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001122:	e00a      	b.n	800113a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001124:	f7ff fa3e 	bl	80005a4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001132:	4293      	cmp	r3, r2
 8001134:	d901      	bls.n	800113a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e04f      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 020c 	and.w	r2, r3, #12
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	429a      	cmp	r2, r3
 800114a:	d1eb      	bne.n	8001124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d20c      	bcs.n	8001174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e032      	b.n	80011da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	4916      	ldr	r1, [pc, #88]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	4313      	orrs	r3, r2
 8001190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	490e      	ldr	r1, [pc, #56]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011b2:	f000 f821 	bl	80011f8 <HAL_RCC_GetSysClockFreq>
 80011b6:	4601      	mov	r1, r0
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	fa21 f303 	lsr.w	r3, r1, r3
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_RCC_ClockConfig+0x1c8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9a2 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00
 80011e8:	40023800 	.word	0x40023800
 80011ec:	0800369c 	.word	0x0800369c
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000000 	.word	0x20000000

080011f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120e:	4b63      	ldr	r3, [pc, #396]	; (800139c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d007      	beq.n	800122a <HAL_RCC_GetSysClockFreq+0x32>
 800121a:	2b08      	cmp	r3, #8
 800121c:	d008      	beq.n	8001230 <HAL_RCC_GetSysClockFreq+0x38>
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 80b4 	bne.w	800138c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001224:	4b5e      	ldr	r3, [pc, #376]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001226:	60bb      	str	r3, [r7, #8]
       break;
 8001228:	e0b3      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800122a:	4b5e      	ldr	r3, [pc, #376]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800122c:	60bb      	str	r3, [r7, #8]
      break;
 800122e:	e0b0      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001230:	4b5a      	ldr	r3, [pc, #360]	; (800139c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001238:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d04a      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001246:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	099b      	lsrs	r3, r3, #6
 800124c:	f04f 0400 	mov.w	r4, #0
 8001250:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	ea03 0501 	and.w	r5, r3, r1
 800125c:	ea04 0602 	and.w	r6, r4, r2
 8001260:	4629      	mov	r1, r5
 8001262:	4632      	mov	r2, r6
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	f04f 0400 	mov.w	r4, #0
 800126c:	0154      	lsls	r4, r2, #5
 800126e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001272:	014b      	lsls	r3, r1, #5
 8001274:	4619      	mov	r1, r3
 8001276:	4622      	mov	r2, r4
 8001278:	1b49      	subs	r1, r1, r5
 800127a:	eb62 0206 	sbc.w	r2, r2, r6
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	f04f 0400 	mov.w	r4, #0
 8001286:	0194      	lsls	r4, r2, #6
 8001288:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800128c:	018b      	lsls	r3, r1, #6
 800128e:	1a5b      	subs	r3, r3, r1
 8001290:	eb64 0402 	sbc.w	r4, r4, r2
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	00e2      	lsls	r2, r4, #3
 800129e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012a2:	00d9      	lsls	r1, r3, #3
 80012a4:	460b      	mov	r3, r1
 80012a6:	4614      	mov	r4, r2
 80012a8:	195b      	adds	r3, r3, r5
 80012aa:	eb44 0406 	adc.w	r4, r4, r6
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	0262      	lsls	r2, r4, #9
 80012b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80012bc:	0259      	lsls	r1, r3, #9
 80012be:	460b      	mov	r3, r1
 80012c0:	4614      	mov	r4, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	4621      	mov	r1, r4
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f04f 0400 	mov.w	r4, #0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	f7fe ff82 	bl	80001d8 <__aeabi_uldivmod>
 80012d4:	4603      	mov	r3, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e049      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	f04f 0400 	mov.w	r4, #0
 80012e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	ea03 0501 	and.w	r5, r3, r1
 80012f2:	ea04 0602 	and.w	r6, r4, r2
 80012f6:	4629      	mov	r1, r5
 80012f8:	4632      	mov	r2, r6
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	f04f 0400 	mov.w	r4, #0
 8001302:	0154      	lsls	r4, r2, #5
 8001304:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001308:	014b      	lsls	r3, r1, #5
 800130a:	4619      	mov	r1, r3
 800130c:	4622      	mov	r2, r4
 800130e:	1b49      	subs	r1, r1, r5
 8001310:	eb62 0206 	sbc.w	r2, r2, r6
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	f04f 0400 	mov.w	r4, #0
 800131c:	0194      	lsls	r4, r2, #6
 800131e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001322:	018b      	lsls	r3, r1, #6
 8001324:	1a5b      	subs	r3, r3, r1
 8001326:	eb64 0402 	sbc.w	r4, r4, r2
 800132a:	f04f 0100 	mov.w	r1, #0
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	00e2      	lsls	r2, r4, #3
 8001334:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001338:	00d9      	lsls	r1, r3, #3
 800133a:	460b      	mov	r3, r1
 800133c:	4614      	mov	r4, r2
 800133e:	195b      	adds	r3, r3, r5
 8001340:	eb44 0406 	adc.w	r4, r4, r6
 8001344:	f04f 0100 	mov.w	r1, #0
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	02a2      	lsls	r2, r4, #10
 800134e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001352:	0299      	lsls	r1, r3, #10
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f04f 0400 	mov.w	r4, #0
 8001362:	461a      	mov	r2, r3
 8001364:	4623      	mov	r3, r4
 8001366:	f7fe ff37 	bl	80001d8 <__aeabi_uldivmod>
 800136a:	4603      	mov	r3, r0
 800136c:	460c      	mov	r4, r1
 800136e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	3301      	adds	r3, #1
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	60bb      	str	r3, [r7, #8]
      break;
 800138a:	e002      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800138e:	60bb      	str	r3, [r7, #8]
      break;
 8001390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001392:	68bb      	ldr	r3, [r7, #8]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	00f42400 	.word	0x00f42400
 80013a4:	007a1200 	.word	0x007a1200

080013a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_RCC_GetHCLKFreq+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008

080013c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013c4:	f7ff fff0 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013c8:	4601      	mov	r1, r0
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	0a9b      	lsrs	r3, r3, #10
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	080036ac 	.word	0x080036ac

080013e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013ec:	f7ff ffdc 	bl	80013a8 <HAL_RCC_GetHCLKFreq>
 80013f0:	4601      	mov	r1, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0b5b      	lsrs	r3, r3, #13
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	080036ac 	.word	0x080036ac

08001410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e01d      	b.n	800145e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 ff68 	bl	800330c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3304      	adds	r3, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f000 fca0 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0201 	orr.w	r2, r2, #1
 800147c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b06      	cmp	r3, #6
 800148e:	d007      	beq.n	80014a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e01d      	b.n	80014fc <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f815 	bl	8001504 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3304      	adds	r3, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4610      	mov	r0, r2
 80014ee:	f000 fc51 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d841      	bhi.n	80015ac <HAL_TIM_OC_Start_IT+0x94>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <HAL_TIM_OC_Start_IT+0x18>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001565 	.word	0x08001565
 8001534:	080015ad 	.word	0x080015ad
 8001538:	080015ad 	.word	0x080015ad
 800153c:	080015ad 	.word	0x080015ad
 8001540:	08001577 	.word	0x08001577
 8001544:	080015ad 	.word	0x080015ad
 8001548:	080015ad 	.word	0x080015ad
 800154c:	080015ad 	.word	0x080015ad
 8001550:	08001589 	.word	0x08001589
 8001554:	080015ad 	.word	0x080015ad
 8001558:	080015ad 	.word	0x080015ad
 800155c:	080015ad 	.word	0x080015ad
 8001560:	0800159b 	.word	0x0800159b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0202 	orr.w	r2, r2, #2
 8001572:	60da      	str	r2, [r3, #12]
      break;
 8001574:	e01b      	b.n	80015ae <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0204 	orr.w	r2, r2, #4
 8001584:	60da      	str	r2, [r3, #12]
      break;
 8001586:	e012      	b.n	80015ae <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0208 	orr.w	r2, r2, #8
 8001596:	60da      	str	r2, [r3, #12]
      break;
 8001598:	e009      	b.n	80015ae <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0210 	orr.w	r2, r2, #16
 80015a8:	60da      	str	r2, [r3, #12]
      break;
 80015aa:	e000      	b.n	80015ae <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80015ac:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2201      	movs	r2, #1
 80015b4:	6839      	ldr	r1, [r7, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 ffb0 	bl	800251c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a10      	ldr	r2, [pc, #64]	; (8001604 <HAL_TIM_OC_Start_IT+0xec>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d107      	bne.n	80015d6 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d007      	beq.n	80015f8 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40010000 	.word	0x40010000

08001608 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e01d      	b.n	8001656 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f815 	bl	800165e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4610      	mov	r0, r2
 8001648:	f000 fba4 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d841      	bhi.n	8001708 <HAL_TIM_IC_Start_IT+0x94>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <HAL_TIM_IC_Start_IT+0x18>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	080016c1 	.word	0x080016c1
 8001690:	08001709 	.word	0x08001709
 8001694:	08001709 	.word	0x08001709
 8001698:	08001709 	.word	0x08001709
 800169c:	080016d3 	.word	0x080016d3
 80016a0:	08001709 	.word	0x08001709
 80016a4:	08001709 	.word	0x08001709
 80016a8:	08001709 	.word	0x08001709
 80016ac:	080016e5 	.word	0x080016e5
 80016b0:	08001709 	.word	0x08001709
 80016b4:	08001709 	.word	0x08001709
 80016b8:	08001709 	.word	0x08001709
 80016bc:	080016f7 	.word	0x080016f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0202 	orr.w	r2, r2, #2
 80016ce:	60da      	str	r2, [r3, #12]
      break;
 80016d0:	e01b      	b.n	800170a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0204 	orr.w	r2, r2, #4
 80016e0:	60da      	str	r2, [r3, #12]
      break;
 80016e2:	e012      	b.n	800170a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0208 	orr.w	r2, r2, #8
 80016f2:	60da      	str	r2, [r3, #12]
      break;
 80016f4:	e009      	b.n	800170a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0210 	orr.w	r2, r2, #16
 8001704:	60da      	str	r2, [r3, #12]
      break;
 8001706:	e000      	b.n	800170a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8001708:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 ff02 	bl	800251c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d007      	beq.n	800173a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b02      	cmp	r3, #2
 8001758:	d122      	bne.n	80017a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b02      	cmp	r3, #2
 8001766:	d11b      	bne.n	80017a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0202 	mvn.w	r2, #2
 8001770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f001 fb3a 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 800178c:	e005      	b.n	800179a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fae2 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fae9 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d122      	bne.n	80017f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d11b      	bne.n	80017f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f06f 0204 	mvn.w	r2, #4
 80017c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f001 fb10 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 80017e0:	e005      	b.n	80017ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fab8 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fabf 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d122      	bne.n	8001848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b08      	cmp	r3, #8
 800180e:	d11b      	bne.n	8001848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0208 	mvn.w	r2, #8
 8001818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2204      	movs	r2, #4
 800181e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f001 fae6 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8001834:	e005      	b.n	8001842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fa8e 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fa95 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b10      	cmp	r3, #16
 8001854:	d122      	bne.n	800189c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b10      	cmp	r3, #16
 8001862:	d11b      	bne.n	800189c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0210 	mvn.w	r2, #16
 800186c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2208      	movs	r2, #8
 8001872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f001 fabc 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8001888:	e005      	b.n	8001896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fa64 	bl	8001d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fa6b 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10e      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d107      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f06f 0201 	mvn.w	r2, #1
 80018c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fa3e 	bl	8001d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b80      	cmp	r3, #128	; 0x80
 80018d4:	d10e      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	2b80      	cmp	r3, #128	; 0x80
 80018e2:	d107      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 feb2 	bl	8002658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fe:	2b40      	cmp	r3, #64	; 0x40
 8001900:	d10e      	bne.n	8001920 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190c:	2b40      	cmp	r3, #64	; 0x40
 800190e:	d107      	bne.n	8001920 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa30 	bl	8001d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b20      	cmp	r3, #32
 800192c:	d10e      	bne.n	800194c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b20      	cmp	r3, #32
 800193a:	d107      	bne.n	800194c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0220 	mvn.w	r2, #32
 8001944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fe7c 	bl	8002644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_TIM_OC_ConfigChannel+0x1a>
 800196a:	2302      	movs	r3, #2
 800196c:	e04e      	b.n	8001a0c <HAL_TIM_OC_ConfigChannel+0xb8>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d839      	bhi.n	80019f8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_TIM_OC_ConfigChannel+0x38>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080019c1 	.word	0x080019c1
 8001990:	080019f9 	.word	0x080019f9
 8001994:	080019f9 	.word	0x080019f9
 8001998:	080019f9 	.word	0x080019f9
 800199c:	080019cf 	.word	0x080019cf
 80019a0:	080019f9 	.word	0x080019f9
 80019a4:	080019f9 	.word	0x080019f9
 80019a8:	080019f9 	.word	0x080019f9
 80019ac:	080019dd 	.word	0x080019dd
 80019b0:	080019f9 	.word	0x080019f9
 80019b4:	080019f9 	.word	0x080019f9
 80019b8:	080019f9 	.word	0x080019f9
 80019bc:	080019eb 	.word	0x080019eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fa64 	bl	8001e94 <TIM_OC1_SetConfig>
      break;
 80019cc:	e015      	b.n	80019fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fac3 	bl	8001f60 <TIM_OC2_SetConfig>
      break;
 80019da:	e00e      	b.n	80019fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fb28 	bl	8002038 <TIM_OC3_SetConfig>
      break;
 80019e8:	e007      	b.n	80019fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fb8b 	bl	800210c <TIM_OC4_SetConfig>
      break;
 80019f6:	e000      	b.n	80019fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80019f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_TIM_IC_ConfigChannel+0x1a>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e08a      	b.n	8001b44 <HAL_TIM_IC_ConfigChannel+0x130>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11b      	bne.n	8001a7c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f000 fbaa 	bl	80021ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 020c 	bic.w	r2, r2, #12
 8001a66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6999      	ldr	r1, [r3, #24]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	619a      	str	r2, [r3, #24]
 8001a7a:	e05a      	b.n	8001b32 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d11c      	bne.n	8001abc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f000 fc22 	bl	80022da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001aa4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6999      	ldr	r1, [r3, #24]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	021a      	lsls	r2, r3, #8
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	619a      	str	r2, [r3, #24]
 8001aba:	e03a      	b.n	8001b32 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d11b      	bne.n	8001afa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f000 fc6f 	bl	80023b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 020c 	bic.w	r2, r2, #12
 8001ae4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69d9      	ldr	r1, [r3, #28]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
 8001af8:	e01b      	b.n	8001b32 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f000 fc8f 	bl	800242c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001b1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69d9      	ldr	r1, [r3, #28]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_TIM_ConfigClockSource+0x18>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e0a6      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0x166>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b40      	cmp	r3, #64	; 0x40
 8001b9a:	d067      	beq.n	8001c6c <HAL_TIM_ConfigClockSource+0x120>
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d80b      	bhi.n	8001bb8 <HAL_TIM_ConfigClockSource+0x6c>
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d073      	beq.n	8001c8c <HAL_TIM_ConfigClockSource+0x140>
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d802      	bhi.n	8001bae <HAL_TIM_ConfigClockSource+0x62>
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d06f      	beq.n	8001c8c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001bac:	e078      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d06c      	beq.n	8001c8c <HAL_TIM_ConfigClockSource+0x140>
 8001bb2:	2b30      	cmp	r3, #48	; 0x30
 8001bb4:	d06a      	beq.n	8001c8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001bb6:	e073      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bb8:	2b70      	cmp	r3, #112	; 0x70
 8001bba:	d00d      	beq.n	8001bd8 <HAL_TIM_ConfigClockSource+0x8c>
 8001bbc:	2b70      	cmp	r3, #112	; 0x70
 8001bbe:	d804      	bhi.n	8001bca <HAL_TIM_ConfigClockSource+0x7e>
 8001bc0:	2b50      	cmp	r3, #80	; 0x50
 8001bc2:	d033      	beq.n	8001c2c <HAL_TIM_ConfigClockSource+0xe0>
 8001bc4:	2b60      	cmp	r3, #96	; 0x60
 8001bc6:	d041      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001bc8:	e06a      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bce:	d066      	beq.n	8001c9e <HAL_TIM_ConfigClockSource+0x152>
 8001bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd4:	d017      	beq.n	8001c06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001bd6:	e063      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f000 fc78 	bl	80024dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	609a      	str	r2, [r3, #8]
      break;
 8001c04:	e04c      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f000 fc61 	bl	80024dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c28:	609a      	str	r2, [r3, #8]
      break;
 8001c2a:	e039      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f000 fb1f 	bl	800227c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2150      	movs	r1, #80	; 0x50
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fc2e 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001c4a:	e029      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f000 fb7b 	bl	8002354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2160      	movs	r1, #96	; 0x60
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fc1e 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001c6a:	e019      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f000 faff 	bl	800227c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fc0e 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f000 fc05 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d831      	bhi.n	8001d34 <HAL_TIM_ReadCapturedValue+0x78>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001d0d 	.word	0x08001d0d
 8001cdc:	08001d35 	.word	0x08001d35
 8001ce0:	08001d35 	.word	0x08001d35
 8001ce4:	08001d35 	.word	0x08001d35
 8001ce8:	08001d17 	.word	0x08001d17
 8001cec:	08001d35 	.word	0x08001d35
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d35 	.word	0x08001d35
 8001cf8:	08001d21 	.word	0x08001d21
 8001cfc:	08001d35 	.word	0x08001d35
 8001d00:	08001d35 	.word	0x08001d35
 8001d04:	08001d35 	.word	0x08001d35
 8001d08:	08001d2b 	.word	0x08001d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	60fb      	str	r3, [r7, #12]

      break;
 8001d14:	e00f      	b.n	8001d36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	60fb      	str	r3, [r7, #12]

      break;
 8001d1e:	e00a      	b.n	8001d36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d26:	60fb      	str	r3, [r7, #12]

      break;
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	60fb      	str	r3, [r7, #12]

      break;
 8001d32:	e000      	b.n	8001d36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001d34:	bf00      	nop
  }

  return tmpreg;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00f      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d00b      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <TIM_Base_SetConfig+0xe8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <TIM_Base_SetConfig+0xec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <TIM_Base_SetConfig+0xf0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dec:	d017      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <TIM_Base_SetConfig+0xe8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <TIM_Base_SetConfig+0xec>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00f      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <TIM_Base_SetConfig+0xf0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <TIM_Base_SetConfig+0xf4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <TIM_Base_SetConfig+0xf8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40014400 	.word	0x40014400
 8001e90:	40014800 	.word	0x40014800

08001e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	f023 0201 	bic.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f023 0302 	bic.w	r3, r3, #2
 8001edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <TIM_OC1_SetConfig+0xc8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d10c      	bne.n	8001f0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f023 0308 	bic.w	r3, r3, #8
 8001ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <TIM_OC1_SetConfig+0xc8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d111      	bne.n	8001f36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	621a      	str	r2, [r3, #32]
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40010000 	.word	0x40010000

08001f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f023 0210 	bic.w	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0320 	bic.w	r3, r3, #32
 8001faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <TIM_OC2_SetConfig+0xd4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10d      	bne.n	8001fdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <TIM_OC2_SetConfig+0xd4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d113      	bne.n	800200c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	621a      	str	r2, [r3, #32]
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40010000 	.word	0x40010000

08002038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <TIM_OC3_SetConfig+0xd0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10d      	bne.n	80020b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800209c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <TIM_OC3_SetConfig+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	621a      	str	r2, [r3, #32]
}
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40010000 	.word	0x40010000

0800210c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <TIM_OC4_SetConfig+0x9c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d109      	bne.n	8002180 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	621a      	str	r2, [r3, #32]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40010000 	.word	0x40010000

080021ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <TIM_TI1_SetConfig+0xbc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <TIM_TI1_SetConfig+0x56>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d00f      	beq.n	8002202 <TIM_TI1_SetConfig+0x56>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <TIM_TI1_SetConfig+0xc0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_TI1_SetConfig+0x56>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a20      	ldr	r2, [pc, #128]	; (8002270 <TIM_TI1_SetConfig+0xc4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_TI1_SetConfig+0x56>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <TIM_TI1_SetConfig+0xc8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_TI1_SetConfig+0x56>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a1e      	ldr	r2, [pc, #120]	; (8002278 <TIM_TI1_SetConfig+0xcc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <TIM_TI1_SetConfig+0x5a>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <TIM_TI1_SetConfig+0x5c>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e003      	b.n	8002226 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800222c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	b2db      	uxtb	r3, r3
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f023 030a 	bic.w	r3, r3, #10
 8002240:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f003 030a 	and.w	r3, r3, #10
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	621a      	str	r2, [r3, #32]
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40000c00 	.word	0x40000c00
 8002278:	40014000 	.word	0x40014000

0800227c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0201 	bic.w	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f023 030a 	bic.w	r3, r3, #10
 80022b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	621a      	str	r2, [r3, #32]
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80022da:	b480      	push	{r7}
 80022dc:	b087      	sub	sp, #28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f023 0210 	bic.w	r2, r3, #16
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	031b      	lsls	r3, r3, #12
 800231e:	b29b      	uxth	r3, r3
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800232c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	621a      	str	r2, [r3, #32]
}
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f023 0210 	bic.w	r2, r3, #16
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800237e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	031b      	lsls	r3, r3, #12
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	621a      	str	r2, [r3, #32]
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f023 0303 	bic.w	r3, r3, #3
 80023e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002404:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	621a      	str	r2, [r3, #32]
}
 8002420:	bf00      	nop
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	031b      	lsls	r3, r3, #12
 8002470:	b29b      	uxth	r3, r3
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800247e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	031b      	lsls	r3, r3, #12
 8002484:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	621a      	str	r2, [r3, #32]
}
 800249a:	bf00      	nop
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f043 0307 	orr.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	021a      	lsls	r2, r3, #8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	431a      	orrs	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2201      	movs	r2, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a1a      	ldr	r2, [r3, #32]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1a      	ldr	r2, [r3, #32]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800257c:	2302      	movs	r3, #2
 800257e:	e050      	b.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d018      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d013      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a16      	ldr	r2, [pc, #88]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a13      	ldr	r2, [pc, #76]	; (8002640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10c      	bne.n	8002610 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4313      	orrs	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40010000 	.word	0x40010000
 8002634:	40000400 	.word	0x40000400
 8002638:	40000800 	.word	0x40000800
 800263c:	40000c00 	.word	0x40000c00
 8002640:	40014000 	.word	0x40014000

08002644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e03f      	b.n	80026fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fee2 	bl	800345c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f829 	bl	8002708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800274a:	f023 030c 	bic.w	r3, r3, #12
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	430b      	orrs	r3, r1
 8002756:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002776:	f040 818b 	bne.w	8002a90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4ac1      	ldr	r2, [pc, #772]	; (8002a84 <UART_SetConfig+0x37c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d005      	beq.n	8002790 <UART_SetConfig+0x88>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4abf      	ldr	r2, [pc, #764]	; (8002a88 <UART_SetConfig+0x380>)
 800278a:	4293      	cmp	r3, r2
 800278c:	f040 80bd 	bne.w	800290a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002790:	f7fe fe2a 	bl	80013e8 <HAL_RCC_GetPCLK2Freq>
 8002794:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	461d      	mov	r5, r3
 800279a:	f04f 0600 	mov.w	r6, #0
 800279e:	46a8      	mov	r8, r5
 80027a0:	46b1      	mov	r9, r6
 80027a2:	eb18 0308 	adds.w	r3, r8, r8
 80027a6:	eb49 0409 	adc.w	r4, r9, r9
 80027aa:	4698      	mov	r8, r3
 80027ac:	46a1      	mov	r9, r4
 80027ae:	eb18 0805 	adds.w	r8, r8, r5
 80027b2:	eb49 0906 	adc.w	r9, r9, r6
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027ca:	4688      	mov	r8, r1
 80027cc:	4691      	mov	r9, r2
 80027ce:	eb18 0005 	adds.w	r0, r8, r5
 80027d2:	eb49 0106 	adc.w	r1, r9, r6
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	461d      	mov	r5, r3
 80027dc:	f04f 0600 	mov.w	r6, #0
 80027e0:	196b      	adds	r3, r5, r5
 80027e2:	eb46 0406 	adc.w	r4, r6, r6
 80027e6:	461a      	mov	r2, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	f7fd fcf5 	bl	80001d8 <__aeabi_uldivmod>
 80027ee:	4603      	mov	r3, r0
 80027f0:	460c      	mov	r4, r1
 80027f2:	461a      	mov	r2, r3
 80027f4:	4ba5      	ldr	r3, [pc, #660]	; (8002a8c <UART_SetConfig+0x384>)
 80027f6:	fba3 2302 	umull	r2, r3, r3, r2
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	461d      	mov	r5, r3
 8002804:	f04f 0600 	mov.w	r6, #0
 8002808:	46a9      	mov	r9, r5
 800280a:	46b2      	mov	sl, r6
 800280c:	eb19 0309 	adds.w	r3, r9, r9
 8002810:	eb4a 040a 	adc.w	r4, sl, sl
 8002814:	4699      	mov	r9, r3
 8002816:	46a2      	mov	sl, r4
 8002818:	eb19 0905 	adds.w	r9, r9, r5
 800281c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002830:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002834:	4689      	mov	r9, r1
 8002836:	4692      	mov	sl, r2
 8002838:	eb19 0005 	adds.w	r0, r9, r5
 800283c:	eb4a 0106 	adc.w	r1, sl, r6
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	461d      	mov	r5, r3
 8002846:	f04f 0600 	mov.w	r6, #0
 800284a:	196b      	adds	r3, r5, r5
 800284c:	eb46 0406 	adc.w	r4, r6, r6
 8002850:	461a      	mov	r2, r3
 8002852:	4623      	mov	r3, r4
 8002854:	f7fd fcc0 	bl	80001d8 <__aeabi_uldivmod>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	461a      	mov	r2, r3
 800285e:	4b8b      	ldr	r3, [pc, #556]	; (8002a8c <UART_SetConfig+0x384>)
 8002860:	fba3 1302 	umull	r1, r3, r3, r2
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	3332      	adds	r3, #50	; 0x32
 8002872:	4a86      	ldr	r2, [pc, #536]	; (8002a8c <UART_SetConfig+0x384>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002880:	4498      	add	r8, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	461d      	mov	r5, r3
 8002886:	f04f 0600 	mov.w	r6, #0
 800288a:	46a9      	mov	r9, r5
 800288c:	46b2      	mov	sl, r6
 800288e:	eb19 0309 	adds.w	r3, r9, r9
 8002892:	eb4a 040a 	adc.w	r4, sl, sl
 8002896:	4699      	mov	r9, r3
 8002898:	46a2      	mov	sl, r4
 800289a:	eb19 0905 	adds.w	r9, r9, r5
 800289e:	eb4a 0a06 	adc.w	sl, sl, r6
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028b6:	4689      	mov	r9, r1
 80028b8:	4692      	mov	sl, r2
 80028ba:	eb19 0005 	adds.w	r0, r9, r5
 80028be:	eb4a 0106 	adc.w	r1, sl, r6
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	461d      	mov	r5, r3
 80028c8:	f04f 0600 	mov.w	r6, #0
 80028cc:	196b      	adds	r3, r5, r5
 80028ce:	eb46 0406 	adc.w	r4, r6, r6
 80028d2:	461a      	mov	r2, r3
 80028d4:	4623      	mov	r3, r4
 80028d6:	f7fd fc7f 	bl	80001d8 <__aeabi_uldivmod>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	461a      	mov	r2, r3
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <UART_SetConfig+0x384>)
 80028e2:	fba3 1302 	umull	r1, r3, r3, r2
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2164      	movs	r1, #100	; 0x64
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	3332      	adds	r3, #50	; 0x32
 80028f4:	4a65      	ldr	r2, [pc, #404]	; (8002a8c <UART_SetConfig+0x384>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	f003 0207 	and.w	r2, r3, #7
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4442      	add	r2, r8
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e26f      	b.n	8002dea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800290a:	f7fe fd59 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 800290e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	461d      	mov	r5, r3
 8002914:	f04f 0600 	mov.w	r6, #0
 8002918:	46a8      	mov	r8, r5
 800291a:	46b1      	mov	r9, r6
 800291c:	eb18 0308 	adds.w	r3, r8, r8
 8002920:	eb49 0409 	adc.w	r4, r9, r9
 8002924:	4698      	mov	r8, r3
 8002926:	46a1      	mov	r9, r4
 8002928:	eb18 0805 	adds.w	r8, r8, r5
 800292c:	eb49 0906 	adc.w	r9, r9, r6
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800293c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002940:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002944:	4688      	mov	r8, r1
 8002946:	4691      	mov	r9, r2
 8002948:	eb18 0005 	adds.w	r0, r8, r5
 800294c:	eb49 0106 	adc.w	r1, r9, r6
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	461d      	mov	r5, r3
 8002956:	f04f 0600 	mov.w	r6, #0
 800295a:	196b      	adds	r3, r5, r5
 800295c:	eb46 0406 	adc.w	r4, r6, r6
 8002960:	461a      	mov	r2, r3
 8002962:	4623      	mov	r3, r4
 8002964:	f7fd fc38 	bl	80001d8 <__aeabi_uldivmod>
 8002968:	4603      	mov	r3, r0
 800296a:	460c      	mov	r4, r1
 800296c:	461a      	mov	r2, r3
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <UART_SetConfig+0x384>)
 8002970:	fba3 2302 	umull	r2, r3, r3, r2
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	461d      	mov	r5, r3
 800297e:	f04f 0600 	mov.w	r6, #0
 8002982:	46a9      	mov	r9, r5
 8002984:	46b2      	mov	sl, r6
 8002986:	eb19 0309 	adds.w	r3, r9, r9
 800298a:	eb4a 040a 	adc.w	r4, sl, sl
 800298e:	4699      	mov	r9, r3
 8002990:	46a2      	mov	sl, r4
 8002992:	eb19 0905 	adds.w	r9, r9, r5
 8002996:	eb4a 0a06 	adc.w	sl, sl, r6
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ae:	4689      	mov	r9, r1
 80029b0:	4692      	mov	sl, r2
 80029b2:	eb19 0005 	adds.w	r0, r9, r5
 80029b6:	eb4a 0106 	adc.w	r1, sl, r6
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	461d      	mov	r5, r3
 80029c0:	f04f 0600 	mov.w	r6, #0
 80029c4:	196b      	adds	r3, r5, r5
 80029c6:	eb46 0406 	adc.w	r4, r6, r6
 80029ca:	461a      	mov	r2, r3
 80029cc:	4623      	mov	r3, r4
 80029ce:	f7fd fc03 	bl	80001d8 <__aeabi_uldivmod>
 80029d2:	4603      	mov	r3, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <UART_SetConfig+0x384>)
 80029da:	fba3 1302 	umull	r1, r3, r3, r2
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2164      	movs	r1, #100	; 0x64
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	3332      	adds	r3, #50	; 0x32
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <UART_SetConfig+0x384>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029fa:	4498      	add	r8, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	461d      	mov	r5, r3
 8002a00:	f04f 0600 	mov.w	r6, #0
 8002a04:	46a9      	mov	r9, r5
 8002a06:	46b2      	mov	sl, r6
 8002a08:	eb19 0309 	adds.w	r3, r9, r9
 8002a0c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a10:	4699      	mov	r9, r3
 8002a12:	46a2      	mov	sl, r4
 8002a14:	eb19 0905 	adds.w	r9, r9, r5
 8002a18:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a1c:	f04f 0100 	mov.w	r1, #0
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a30:	4689      	mov	r9, r1
 8002a32:	4692      	mov	sl, r2
 8002a34:	eb19 0005 	adds.w	r0, r9, r5
 8002a38:	eb4a 0106 	adc.w	r1, sl, r6
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	461d      	mov	r5, r3
 8002a42:	f04f 0600 	mov.w	r6, #0
 8002a46:	196b      	adds	r3, r5, r5
 8002a48:	eb46 0406 	adc.w	r4, r6, r6
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fd fbc2 	bl	80001d8 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <UART_SetConfig+0x384>)
 8002a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	2164      	movs	r1, #100	; 0x64
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	3332      	adds	r3, #50	; 0x32
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <UART_SetConfig+0x384>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	f003 0207 	and.w	r2, r3, #7
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4442      	add	r2, r8
 8002a80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a82:	e1b2      	b.n	8002dea <UART_SetConfig+0x6e2>
 8002a84:	40011000 	.word	0x40011000
 8002a88:	40011400 	.word	0x40011400
 8002a8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4ad7      	ldr	r2, [pc, #860]	; (8002df4 <UART_SetConfig+0x6ec>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d005      	beq.n	8002aa6 <UART_SetConfig+0x39e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4ad6      	ldr	r2, [pc, #856]	; (8002df8 <UART_SetConfig+0x6f0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 80d1 	bne.w	8002c48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa6:	f7fe fc9f 	bl	80013e8 <HAL_RCC_GetPCLK2Freq>
 8002aaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	469a      	mov	sl, r3
 8002ab0:	f04f 0b00 	mov.w	fp, #0
 8002ab4:	46d0      	mov	r8, sl
 8002ab6:	46d9      	mov	r9, fp
 8002ab8:	eb18 0308 	adds.w	r3, r8, r8
 8002abc:	eb49 0409 	adc.w	r4, r9, r9
 8002ac0:	4698      	mov	r8, r3
 8002ac2:	46a1      	mov	r9, r4
 8002ac4:	eb18 080a 	adds.w	r8, r8, sl
 8002ac8:	eb49 090b 	adc.w	r9, r9, fp
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ad8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002adc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ae0:	4688      	mov	r8, r1
 8002ae2:	4691      	mov	r9, r2
 8002ae4:	eb1a 0508 	adds.w	r5, sl, r8
 8002ae8:	eb4b 0609 	adc.w	r6, fp, r9
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4619      	mov	r1, r3
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	f04f 0400 	mov.w	r4, #0
 8002afe:	0094      	lsls	r4, r2, #2
 8002b00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b04:	008b      	lsls	r3, r1, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	4623      	mov	r3, r4
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	4631      	mov	r1, r6
 8002b0e:	f7fd fb63 	bl	80001d8 <__aeabi_uldivmod>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	461a      	mov	r2, r3
 8002b18:	4bb8      	ldr	r3, [pc, #736]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	469b      	mov	fp, r3
 8002b28:	f04f 0c00 	mov.w	ip, #0
 8002b2c:	46d9      	mov	r9, fp
 8002b2e:	46e2      	mov	sl, ip
 8002b30:	eb19 0309 	adds.w	r3, r9, r9
 8002b34:	eb4a 040a 	adc.w	r4, sl, sl
 8002b38:	4699      	mov	r9, r3
 8002b3a:	46a2      	mov	sl, r4
 8002b3c:	eb19 090b 	adds.w	r9, r9, fp
 8002b40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b58:	4689      	mov	r9, r1
 8002b5a:	4692      	mov	sl, r2
 8002b5c:	eb1b 0509 	adds.w	r5, fp, r9
 8002b60:	eb4c 060a 	adc.w	r6, ip, sl
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	0094      	lsls	r4, r2, #2
 8002b78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b7c:	008b      	lsls	r3, r1, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4623      	mov	r3, r4
 8002b82:	4628      	mov	r0, r5
 8002b84:	4631      	mov	r1, r6
 8002b86:	f7fd fb27 	bl	80001d8 <__aeabi_uldivmod>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b9a      	ldr	r3, [pc, #616]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2164      	movs	r1, #100	; 0x64
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a95      	ldr	r2, [pc, #596]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb0:	4498      	add	r8, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	469b      	mov	fp, r3
 8002bb6:	f04f 0c00 	mov.w	ip, #0
 8002bba:	46d9      	mov	r9, fp
 8002bbc:	46e2      	mov	sl, ip
 8002bbe:	eb19 0309 	adds.w	r3, r9, r9
 8002bc2:	eb4a 040a 	adc.w	r4, sl, sl
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	46a2      	mov	sl, r4
 8002bca:	eb19 090b 	adds.w	r9, r9, fp
 8002bce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002be2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002be6:	4689      	mov	r9, r1
 8002be8:	4692      	mov	sl, r2
 8002bea:	eb1b 0509 	adds.w	r5, fp, r9
 8002bee:	eb4c 060a 	adc.w	r6, ip, sl
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	0094      	lsls	r4, r2, #2
 8002c06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c0a:	008b      	lsls	r3, r1, #2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	4628      	mov	r0, r5
 8002c12:	4631      	mov	r1, r6
 8002c14:	f7fd fae0 	bl	80001d8 <__aeabi_uldivmod>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002c20:	fba3 1302 	umull	r1, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2164      	movs	r1, #100	; 0x64
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	4a72      	ldr	r2, [pc, #456]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4442      	add	r2, r8
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e0d0      	b.n	8002dea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c48:	f7fe fbba 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	469a      	mov	sl, r3
 8002c52:	f04f 0b00 	mov.w	fp, #0
 8002c56:	46d0      	mov	r8, sl
 8002c58:	46d9      	mov	r9, fp
 8002c5a:	eb18 0308 	adds.w	r3, r8, r8
 8002c5e:	eb49 0409 	adc.w	r4, r9, r9
 8002c62:	4698      	mov	r8, r3
 8002c64:	46a1      	mov	r9, r4
 8002c66:	eb18 080a 	adds.w	r8, r8, sl
 8002c6a:	eb49 090b 	adc.w	r9, r9, fp
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c82:	4688      	mov	r8, r1
 8002c84:	4691      	mov	r9, r2
 8002c86:	eb1a 0508 	adds.w	r5, sl, r8
 8002c8a:	eb4b 0609 	adc.w	r6, fp, r9
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4619      	mov	r1, r3
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	f04f 0400 	mov.w	r4, #0
 8002ca0:	0094      	lsls	r4, r2, #2
 8002ca2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ca6:	008b      	lsls	r3, r1, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	4628      	mov	r0, r5
 8002cae:	4631      	mov	r1, r6
 8002cb0:	f7fd fa92 	bl	80001d8 <__aeabi_uldivmod>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	469b      	mov	fp, r3
 8002cca:	f04f 0c00 	mov.w	ip, #0
 8002cce:	46d9      	mov	r9, fp
 8002cd0:	46e2      	mov	sl, ip
 8002cd2:	eb19 0309 	adds.w	r3, r9, r9
 8002cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8002cda:	4699      	mov	r9, r3
 8002cdc:	46a2      	mov	sl, r4
 8002cde:	eb19 090b 	adds.w	r9, r9, fp
 8002ce2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	4692      	mov	sl, r2
 8002cfe:	eb1b 0509 	adds.w	r5, fp, r9
 8002d02:	eb4c 060a 	adc.w	r6, ip, sl
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0094      	lsls	r4, r2, #2
 8002d1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d1e:	008b      	lsls	r3, r1, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	4628      	mov	r0, r5
 8002d26:	4631      	mov	r1, r6
 8002d28:	f7fd fa56 	bl	80001d8 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002d34:	fba3 1302 	umull	r1, r3, r3, r2
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	2164      	movs	r1, #100	; 0x64
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	3332      	adds	r3, #50	; 0x32
 8002d46:	4a2d      	ldr	r2, [pc, #180]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d52:	4498      	add	r8, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	469b      	mov	fp, r3
 8002d58:	f04f 0c00 	mov.w	ip, #0
 8002d5c:	46d9      	mov	r9, fp
 8002d5e:	46e2      	mov	sl, ip
 8002d60:	eb19 0309 	adds.w	r3, r9, r9
 8002d64:	eb4a 040a 	adc.w	r4, sl, sl
 8002d68:	4699      	mov	r9, r3
 8002d6a:	46a2      	mov	sl, r4
 8002d6c:	eb19 090b 	adds.w	r9, r9, fp
 8002d70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d88:	4689      	mov	r9, r1
 8002d8a:	4692      	mov	sl, r2
 8002d8c:	eb1b 0509 	adds.w	r5, fp, r9
 8002d90:	eb4c 060a 	adc.w	r6, ip, sl
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f04f 0400 	mov.w	r4, #0
 8002da6:	0094      	lsls	r4, r2, #2
 8002da8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dac:	008b      	lsls	r3, r1, #2
 8002dae:	461a      	mov	r2, r3
 8002db0:	4623      	mov	r3, r4
 8002db2:	4628      	mov	r0, r5
 8002db4:	4631      	mov	r1, r6
 8002db6:	f7fd fa0f 	bl	80001d8 <__aeabi_uldivmod>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2164      	movs	r1, #100	; 0x64
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	; 0x32
 8002dd4:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4442      	add	r2, r8
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	e7ff      	b.n	8002dea <UART_SetConfig+0x6e2>
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40011400 	.word	0x40011400
 8002dfc:	51eb851f 	.word	0x51eb851f

08002e00 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Value2=0;
uint32_t difference=0;
uint32_t frequency=0;
uint8_t is_first_captured=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d131      	bne.n	8002e76 <HAL_TIM_IC_CaptureCallback+0x76>
		if(is_first_captured == 0){
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <HAL_TIM_IC_CaptureCallback+0x30>
			IC_Value1=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002e1a:	210c      	movs	r1, #12
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fe ff4d 	bl	8001cbc <HAL_TIM_ReadCapturedValue>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002e26:	601a      	str	r2, [r3, #0]
			is_first_captured = 1;
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]

				is_first_captured=0;
			}
		}
	}
}
 8002e2e:	e022      	b.n	8002e76 <HAL_TIM_IC_CaptureCallback+0x76>
			IC_Value2=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002e30:	210c      	movs	r1, #12
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe ff42 	bl	8001cbc <HAL_TIM_ReadCapturedValue>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002e3c:	601a      	str	r2, [r3, #0]
			if(IC_Value2 > IC_Value1)
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d907      	bls.n	8002e5a <HAL_TIM_IC_CaptureCallback+0x5a>
				difference = (IC_Value2 - IC_Value1)/2;		// ONE RISING ONE FALLING EDGE
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002e58:	6013      	str	r3, [r2, #0]
			if(difference > 0){
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_TIM_IC_CaptureCallback+0x76>
				frequency = 10000000/difference;	//100MHz with 10 prescalar = 10 MHz
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002e6e:	6013      	str	r3, [r2, #0]
				is_first_captured=0;
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40000800 	.word	0x40000800
 8002e84:	20000038 	.word	0x20000038
 8002e88:	20000028 	.word	0x20000028
 8002e8c:	2000002c 	.word	0x2000002c
 8002e90:	20000030 	.word	0x20000030
 8002e94:	00989680 	.word	0x00989680
 8002e98:	20000034 	.word	0x20000034

08002e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ea0:	f7fd fb1a 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ea4:	f000 f818 	bl	8002ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea8:	f000 f990 	bl	80031cc <MX_GPIO_Init>
  MX_TIM3_Init();
 8002eac:	f000 f87c 	bl	8002fa8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002eb0:	f000 f962 	bl	8003178 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002eb4:	f000 f8c6 	bl	8003044 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //---- PART 1 ----
  HAL_TIM_Base_Start_IT(&htim3);
 8002eb8:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <main+0x34>)
 8002eba:	f7fe fad4 	bl	8001466 <HAL_TIM_Base_Start_IT>
  //---- PART 2-3 ----
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 8002ebe:	2108      	movs	r1, #8
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <main+0x38>)
 8002ec2:	f7fe fb29 	bl	8001518 <HAL_TIM_OC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8002ec6:	210c      	movs	r1, #12
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <main+0x38>)
 8002eca:	f7fe fbd3 	bl	8001674 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <main+0x32>
 8002ed0:	20000080 	.word	0x20000080
 8002ed4:	20000040 	.word	0x20000040

08002ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b094      	sub	sp, #80	; 0x50
 8002edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ede:	f107 0320 	add.w	r3, r7, #32
 8002ee2:	2230      	movs	r2, #48	; 0x30
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fbc4 	bl	8003674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <SystemClock_Config+0xc8>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <SystemClock_Config+0xc8>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <SystemClock_Config+0xc8>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <SystemClock_Config+0xcc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <SystemClock_Config+0xcc>)
 8002f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <SystemClock_Config+0xcc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f34:	2302      	movs	r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f40:	2302      	movs	r3, #2
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002f4c:	2364      	movs	r3, #100	; 0x64
 8002f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f50:	2302      	movs	r3, #2
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f54:	2304      	movs	r3, #4
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f58:	f107 0320 	add.w	r3, r7, #32
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fdf5 	bl	8000b4c <HAL_RCC_OscConfig>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f68:	f000 f9a0 	bl	80032ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f70:	2302      	movs	r3, #2
 8002f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	2103      	movs	r1, #3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe f84f 	bl	800102c <HAL_RCC_ClockConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002f94:	f000 f98a 	bl	80032ac <Error_Handler>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	3750      	adds	r7, #80	; 0x50
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <MX_TIM3_Init+0x94>)
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <MX_TIM3_Init+0x98>)
 8002fc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 763;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <MX_TIM3_Init+0x94>)
 8002fcc:	f240 22fb 	movw	r2, #763	; 0x2fb
 8002fd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <MX_TIM3_Init+0x94>)
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65530;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <MX_TIM3_Init+0x94>)
 8002fda:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8002fde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <MX_TIM3_Init+0x94>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <MX_TIM3_Init+0x94>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fec:	4813      	ldr	r0, [pc, #76]	; (800303c <MX_TIM3_Init+0x94>)
 8002fee:	f7fe fa0f 	bl	8001410 <HAL_TIM_Base_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ff8:	f000 f958 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003000:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003002:	f107 0308 	add.w	r3, r7, #8
 8003006:	4619      	mov	r1, r3
 8003008:	480c      	ldr	r0, [pc, #48]	; (800303c <MX_TIM3_Init+0x94>)
 800300a:	f7fe fd9f 	bl	8001b4c <HAL_TIM_ConfigClockSource>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003014:	f000 f94a 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003020:	463b      	mov	r3, r7
 8003022:	4619      	mov	r1, r3
 8003024:	4805      	ldr	r0, [pc, #20]	; (800303c <MX_TIM3_Init+0x94>)
 8003026:	f7ff fa9f 	bl	8002568 <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003030:	f000 f93c 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000080 	.word	0x20000080
 8003040:	40000400 	.word	0x40000400

08003044 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b092      	sub	sp, #72	; 0x48
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	611a      	str	r2, [r3, #16]
 8003072:	615a      	str	r2, [r3, #20]
 8003074:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003082:	4b3b      	ldr	r3, [pc, #236]	; (8003170 <MX_TIM4_Init+0x12c>)
 8003084:	4a3b      	ldr	r2, [pc, #236]	; (8003174 <MX_TIM4_Init+0x130>)
 8003086:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8003088:	4b39      	ldr	r3, [pc, #228]	; (8003170 <MX_TIM4_Init+0x12c>)
 800308a:	220a      	movs	r2, #10
 800308c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308e:	4b38      	ldr	r3, [pc, #224]	; (8003170 <MX_TIM4_Init+0x12c>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <MX_TIM4_Init+0x12c>)
 8003096:	f24c 3250 	movw	r2, #50000	; 0xc350
 800309a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309c:	4b34      	ldr	r3, [pc, #208]	; (8003170 <MX_TIM4_Init+0x12c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <MX_TIM4_Init+0x12c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030a8:	4831      	ldr	r0, [pc, #196]	; (8003170 <MX_TIM4_Init+0x12c>)
 80030aa:	f7fe f9b1 	bl	8001410 <HAL_TIM_Base_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80030b4:	f000 f8fa 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030c2:	4619      	mov	r1, r3
 80030c4:	482a      	ldr	r0, [pc, #168]	; (8003170 <MX_TIM4_Init+0x12c>)
 80030c6:	f7fe fd41 	bl	8001b4c <HAL_TIM_ConfigClockSource>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80030d0:	f000 f8ec 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80030d4:	4826      	ldr	r0, [pc, #152]	; (8003170 <MX_TIM4_Init+0x12c>)
 80030d6:	f7fe f9ea 	bl	80014ae <HAL_TIM_OC_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80030e0:	f000 f8e4 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80030e4:	4822      	ldr	r0, [pc, #136]	; (8003170 <MX_TIM4_Init+0x12c>)
 80030e6:	f7fe fa8f 	bl	8001608 <HAL_TIM_IC_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80030f0:	f000 f8dc 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003100:	4619      	mov	r1, r3
 8003102:	481b      	ldr	r0, [pc, #108]	; (8003170 <MX_TIM4_Init+0x12c>)
 8003104:	f7ff fa30 	bl	8002568 <HAL_TIMEx_MasterConfigSynchronization>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM4_Init+0xce>
  {
    Error_Handler();
 800310e:	f000 f8cd 	bl	80032ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003112:	2330      	movs	r3, #48	; 0x30
 8003114:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 10000;
 8003116:	f242 7310 	movw	r3, #10000	; 0x2710
 800311a:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	2208      	movs	r2, #8
 800312a:	4619      	mov	r1, r3
 800312c:	4810      	ldr	r0, [pc, #64]	; (8003170 <MX_TIM4_Init+0x12c>)
 800312e:	f7fe fc11 	bl	8001954 <HAL_TIM_OC_ConfigChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 8003138:	f000 f8b8 	bl	80032ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800313c:	2300      	movs	r3, #0
 800313e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003140:	2301      	movs	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	220c      	movs	r2, #12
 8003150:	4619      	mov	r1, r3
 8003152:	4807      	ldr	r0, [pc, #28]	; (8003170 <MX_TIM4_Init+0x12c>)
 8003154:	f7fe fc5e 	bl	8001a14 <HAL_TIM_IC_ConfigChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM4_Init+0x11e>
  {
    Error_Handler();
 800315e:	f000 f8a5 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003162:	4803      	ldr	r0, [pc, #12]	; (8003170 <MX_TIM4_Init+0x12c>)
 8003164:	f000 f940 	bl	80033e8 <HAL_TIM_MspPostInit>

}
 8003168:	bf00      	nop
 800316a:	3748      	adds	r7, #72	; 0x48
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000040 	.word	0x20000040
 8003174:	40000800 	.word	0x40000800

08003178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <MX_USART2_UART_Init+0x50>)
 8003180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 8003184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 800319e:	220c      	movs	r2, #12
 80031a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 80031b0:	f7ff fa5c 	bl	800266c <HAL_UART_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031ba:	f000 f877 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200000c0 	.word	0x200000c0
 80031c8:	40004400 	.word	0x40004400

080031cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <MX_GPIO_Init+0xd0>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a2c      	ldr	r2, [pc, #176]	; (800329c <MX_GPIO_Init+0xd0>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b2a      	ldr	r3, [pc, #168]	; (800329c <MX_GPIO_Init+0xd0>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <MX_GPIO_Init+0xd0>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a25      	ldr	r2, [pc, #148]	; (800329c <MX_GPIO_Init+0xd0>)
 8003208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <MX_GPIO_Init+0xd0>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <MX_GPIO_Init+0xd0>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <MX_GPIO_Init+0xd0>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b1c      	ldr	r3, [pc, #112]	; (800329c <MX_GPIO_Init+0xd0>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <MX_GPIO_Init+0xd0>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <MX_GPIO_Init+0xd0>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <MX_GPIO_Init+0xd0>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003252:	2200      	movs	r2, #0
 8003254:	2120      	movs	r1, #32
 8003256:	4812      	ldr	r0, [pc, #72]	; (80032a0 <MX_GPIO_Init+0xd4>)
 8003258:	f7fd fc44 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800325c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <MX_GPIO_Init+0xd8>)
 8003264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	480d      	ldr	r0, [pc, #52]	; (80032a8 <MX_GPIO_Init+0xdc>)
 8003272:	f7fd fab5 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003276:	2320      	movs	r3, #32
 8003278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	4804      	ldr	r0, [pc, #16]	; (80032a0 <MX_GPIO_Init+0xd4>)
 800328e:	f7fd faa7 	bl	80007e0 <HAL_GPIO_Init>

}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000
 80032a4:	10210000 	.word	0x10210000
 80032a8:	40020800 	.word	0x40020800

080032ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_MspInit+0x4c>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <HAL_MspInit+0x4c>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d0:	6453      	str	r3, [r2, #68]	; 0x44
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_MspInit+0x4c>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_MspInit+0x4c>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <HAL_MspInit+0x4c>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_MspInit+0x4c>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032fa:	2007      	movs	r0, #7
 80032fc:	f7fd fa2e 	bl	800075c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <HAL_TIM_Base_MspInit+0xcc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d116      	bne.n	800335c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2100      	movs	r1, #0
 800334e:	201d      	movs	r0, #29
 8003350:	f7fd fa0f 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003354:	201d      	movs	r0, #29
 8003356:	f7fd fa28 	bl	80007aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800335a:	e039      	b.n	80033d0 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM4)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1f      	ldr	r2, [pc, #124]	; (80033e0 <HAL_TIM_Base_MspInit+0xd4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d134      	bne.n	80033d0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_TIM_Base_MspInit+0xd0>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800339e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033b0:	2302      	movs	r3, #2
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	4619      	mov	r1, r3
 80033ba:	480a      	ldr	r0, [pc, #40]	; (80033e4 <HAL_TIM_Base_MspInit+0xd8>)
 80033bc:	f7fd fa10 	bl	80007e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	201e      	movs	r0, #30
 80033c6:	f7fd f9d4 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033ca:	201e      	movs	r0, #30
 80033cc:	f7fd f9ed 	bl	80007aa <HAL_NVIC_EnableIRQ>
}
 80033d0:	bf00      	nop
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40020400 	.word	0x40020400

080033e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 030c 	add.w	r3, r7, #12
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a12      	ldr	r2, [pc, #72]	; (8003450 <HAL_TIM_MspPostInit+0x68>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d11e      	bne.n	8003448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_TIM_MspPostInit+0x6c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <HAL_TIM_MspPostInit+0x6c>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HAL_TIM_MspPostInit+0x6c>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800342a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	2302      	movs	r3, #2
 800342e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003438:	2302      	movs	r3, #2
 800343a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4619      	mov	r1, r3
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <HAL_TIM_MspPostInit+0x70>)
 8003444:	f7fd f9cc 	bl	80007e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40000800 	.word	0x40000800
 8003454:	40023800 	.word	0x40023800
 8003458:	40020400 	.word	0x40020400

0800345c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_UART_MspInit+0x84>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12b      	bne.n	80034d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_UART_MspInit+0x88>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_UART_MspInit+0x88>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_UART_MspInit+0x88>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <HAL_UART_MspInit+0x88>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <HAL_UART_MspInit+0x88>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_UART_MspInit+0x88>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034b6:	230c      	movs	r3, #12
 80034b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034c6:	2307      	movs	r3, #7
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 0314 	add.w	r3, r7, #20
 80034ce:	4619      	mov	r1, r3
 80034d0:	4805      	ldr	r0, [pc, #20]	; (80034e8 <HAL_UART_MspInit+0x8c>)
 80034d2:	f7fd f985 	bl	80007e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034d6:	bf00      	nop
 80034d8:	3728      	adds	r7, #40	; 0x28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40004400 	.word	0x40004400
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40020000 	.word	0x40020000

080034ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034fe:	e7fe      	b.n	80034fe <HardFault_Handler+0x4>

08003500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003504:	e7fe      	b.n	8003504 <MemManage_Handler+0x4>

08003506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800350a:	e7fe      	b.n	800350a <BusFault_Handler+0x4>

0800350c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003510:	e7fe      	b.n	8003510 <UsageFault_Handler+0x4>

08003512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003540:	f7fd f81c 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}

08003548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800354c:	4804      	ldr	r0, [pc, #16]	; (8003560 <TIM3_IRQHandler+0x18>)
 800354e:	f7fe f8f9 	bl	8001744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //---- PART 1 ----
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8003552:	2120      	movs	r1, #32
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <TIM3_IRQHandler+0x1c>)
 8003556:	f7fd fade 	bl	8000b16 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000080 	.word	0x20000080
 8003564:	40020000 	.word	0x40020000

08003568 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800356e:	480e      	ldr	r0, [pc, #56]	; (80035a8 <TIM4_IRQHandler+0x40>)
 8003570:	f7fe f8e8 	bl	8001744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  //---- PART 2-3 ----
  uint32_t cmp = __HAL_TIM_GET_COMPARE(&htim4,TIM_CHANNEL_3);
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <TIM4_IRQHandler+0x40>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	607b      	str	r3, [r7, #4]
  if(cmp==40000){
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003582:	4293      	cmp	r3, r2
 8003584:	d102      	bne.n	800358c <TIM4_IRQHandler+0x24>
	  cmp=0;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	e004      	b.n	8003596 <TIM4_IRQHandler+0x2e>
  }
  else{
	  cmp+=10000;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003592:	3310      	adds	r3, #16
 8003594:	607b      	str	r3, [r7, #4]
  }
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,cmp);
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <TIM4_IRQHandler+0x40>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END TIM4_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000040 	.word	0x20000040

080035ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <SystemInit+0x28>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <SystemInit+0x28>)
 80035b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <SystemInit+0x28>)
 80035c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035c6:	609a      	str	r2, [r3, #8]
#endif
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035de:	e003      	b.n	80035e8 <LoopCopyDataInit>

080035e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035e6:	3104      	adds	r1, #4

080035e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035e8:	480b      	ldr	r0, [pc, #44]	; (8003618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035f0:	d3f6      	bcc.n	80035e0 <CopyDataInit>
  ldr  r2, =_sbss
 80035f2:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035f4:	e002      	b.n	80035fc <LoopFillZerobss>

080035f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035f8:	f842 3b04 	str.w	r3, [r2], #4

080035fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003600:	d3f9      	bcc.n	80035f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003602:	f7ff ffd3 	bl	80035ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003606:	f000 f811 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800360a:	f7ff fc47 	bl	8002e9c <main>
  bx  lr    
 800360e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003610:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003614:	080036c4 	.word	0x080036c4
  ldr  r0, =_sdata
 8003618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800361c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003620:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003624:	20000100 	.word	0x20000100

08003628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC_IRQHandler>
	...

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4e0d      	ldr	r6, [pc, #52]	; (8003664 <__libc_init_array+0x38>)
 8003630:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003632:	1ba4      	subs	r4, r4, r6
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	2500      	movs	r5, #0
 8003638:	42a5      	cmp	r5, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	4e0b      	ldr	r6, [pc, #44]	; (800366c <__libc_init_array+0x40>)
 800363e:	4c0c      	ldr	r4, [pc, #48]	; (8003670 <__libc_init_array+0x44>)
 8003640:	f000 f820 	bl	8003684 <_init>
 8003644:	1ba4      	subs	r4, r4, r6
 8003646:	10a4      	asrs	r4, r4, #2
 8003648:	2500      	movs	r5, #0
 800364a:	42a5      	cmp	r5, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003654:	4798      	blx	r3
 8003656:	3501      	adds	r5, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800365e:	4798      	blx	r3
 8003660:	3501      	adds	r5, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	080036bc 	.word	0x080036bc
 8003668:	080036bc 	.word	0x080036bc
 800366c:	080036bc 	.word	0x080036bc
 8003670:	080036c0 	.word	0x080036c0

08003674 <memset>:
 8003674:	4402      	add	r2, r0
 8003676:	4603      	mov	r3, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <_init>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr

08003690 <_fini>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr
